[DEFAULT]
ODIRBASE=%(BASEDIR)s/output
PDIR=%(ODIRBASE)s/%(__name__)s
ODIR=%(PDIR)s/%(TIMESTAMP)s
BIN=%(BASEDIR)s/bin
LOGFILE=%(ODIRBASE)s/LOG
PYTHON=python
CURLTIMEOUT=-m 300
CURL=curl %(CURLTIMEOUT)s
TAR=tar
RM=rm
MV=mv
CP=cp
ZCAT=zcat
SED=sed
UNZIP=unzip
GREP=grep
CAT=cat

# With ConfigParser and Python 2.6 (anything less than 3.2) there is NO WAY for a
# config value to contain a percent character.
# HACK: The refresh script will replace the following PCT string with a "%" character.
# This allows us to include encoded characters in URLs in this config file.
# For example, to to include a space (%20) character:
#   space: %(PCT)s20
#   myurl: http://someplace.com/path%(space)swith%(space)sspaces/
#
PCT=__LITERAL_PCT_CHAR__
SPACE=%(PCT)s20

# required: True
#       if the source fails, refresh.py with exit with a 1 
#       this will cause the jenkins build to fail 
#       and prevent mousemine from being built.
# required: False  (actually any string other than "True")
#       if the source fails, cached values for the source will be used.
required=False

[emapa]
cmd:
    %(PYTHON)s %(BIN)s/libdump/dumpEMAPAobo.py > %(ODIR)s/EMAPA.obo

[medic]
cmd:
    %(CURL)s https://gillnet.mdibl.org/~twiegers/mgi/mgiMEDIC.obo.gz | %(ZCAT)s > %(ODIR)s/MEDIC.obo
    %(PYTHON)s %(BIN)s/libdump/MedicConflater.py %(ODIR)s/MEDIC.obo %(ODIR)s/MEDIC_conflated.obo

[go]
cmd:
    %(CURL)s -o %(ODIR)s/GeneOntology.obo http://www.geneontology.org/ontology/obo_format_1_0/gene_ontology.1_0.obo

[mp]
cmd:
    %(CURL)s -o %(ODIR)s/MammalianPhenotype.obo ftp://ftp.informatics.jax.org/pub/reports/MPheno_OBO.ontology
    sed -i '/\(^created_by\)\|\(^creation_date\)/d' %(ODIR)s/MammalianPhenotype.obo


[uberon]
cmd:
    %(CURL)s -o %(ODIR)s/uberon.obo http://obo.svn.sourceforge.net/svnroot/obo/uberon/trunk/uberon.obo

[ma]
cmd:
    %(CURL)s -o %(ODIR)s/MA.obo http://www.berkeleybop.org/ontologies/ma.obo

[psi-mi]
cmd:
    %(CURL)s -o %(ODIR)s/psi-mi.obo http://psidev.cvs.sourceforge.net/viewvc/psidev/psi/mi/rel25/data/psi-mi25.obo

[mgi-base]
required:
    True 
cmd: 
    %(PYTHON)s %(BIN)s/dumpMgiItemXml.py -d %(ODIR)s -Dmedicfile=%(ODIRBASE)s/medic/latest/MEDIC_conflated.obo --logfile %(LOGFILE)s


[yeastmine]
cmd:
    %(PYTHON)s %(BIN)s/libdump/fmfd.py -d %(ODIR)s -o yeast -l %(LOGFILE)s

[zebrafishmine]
cmd:
    %(PYTHON)s %(BIN)s/libdump/fmfd.py -d %(ODIR)s -o zebrafish

[ratmine]
cmd:
    %(PYTHON)s %(BIN)s/libdump/fmfd.py -d %(ODIR)s -o rat

[flymine]
cmd:
    %(PYTHON)s %(BIN)s/libdump/fmfd.py -d %(ODIR)s -o fly

[wormmine]
cmd:
    %(PYTHON)s %(BIN)s/libdump/fmfd.py -d %(ODIR)s -o worm

[entrez]
cmd:
    %(CURL)s ftp://ftp.ncbi.nih.gov/gene/DATA/gene_info.gz | %(ZCAT)s > %(ODIR)s/entrez

[homologene]
cmd:
    %(CURL)s ftp://ftp.ncbi.nih.gov/pub/HomoloGene/current/homologene.data > %(ODIR)s/homologene.data
    %(PYTHON)s %(BIN)s/libdump/filterNonGenes.py -u -t homologene %(ODIR)s/homologene.data

[panther]
cmd:
    %(CURL)s -o %(ODIR)s/RefGenomeOrthologs.tar.gz ftp://ftp.pantherdb.org/ortholog/current_release/RefGenomeOrthologs.tar.gz 
    %(TAR)s -xzvf %(ODIR)s/RefGenomeOrthologs.tar.gz -C %(ODIR)s
    %(RM)s %(ODIR)s/RefGenomeOrthologs.tar.gz
    %(PYTHON)s %(BIN)s/libdump/filterNonGenes.py -u -t panther %(ODIR)s/RefGenomeOrthologs

[biogrid]
cmd:
    %(CURL)s -o %(ODIR)s/BIOGRID-ORGANISM.psi25.zip http://thebiogrid.org/downloads/archives/Latest%(SPACE)sRelease/BIOGRID-ORGANISM-LATEST.psi25.zip
    %(UNZIP)s %(ODIR)s/BIOGRID-ORGANISM.psi25.zip 'BIOGRID-ORGANISM-Mus_musculus*' -d %(ODIR)s
    %(PYTHON)s %(BIN)s/libdump/filterNonGenes.py -u -t biogrid %(ODIR)s/*.xml

[intact]
cmd:
    %(CURL)s -o %(ODIR)s/mouse.zip ftp://ftp.ebi.ac.uk/pub/databases/intact/current/psi25/species/mouse.zip
    %(UNZIP)s %(ODIR)s/mouse.zip -d %(ODIR)s
    %(RM)s %(ODIR)s/mouse.zip
    %(PYTHON)s %(BIN)s/libdump/filterNonGenes.py -u -t intact %(ODIR)s/*.xml

[uniprot]
# Uniprot data for mouse (taxonid = 10090) includes proteins for mouse subspecies (e.g. Mus 
# musculus domesticus, M.m. bactrianus, etc.). The following defines a sed filter to convert
# taxon ids to 10090. E.g. look for lines like:
#    <dbReference type="NCBI Taxonomy" id="35531"/>
# and convert them to:
#    <dbReference type="NCBI Taxonomy" id="10090"/>
sedids=\(10091\|10092\|35531\|39442\|57486\|116058\|179238\|477815\|1643390\)
sedsearch=<dbReference type="NCBI Taxonomy" id="%(sedids)s"\/>
sedreplace=<dbReference type="NCBI Taxonomy" id="10090"\/>
sedcmd=%(SED)s 's/%(sedsearch)s/%(sedreplace)s/'
cmd:
    %(CURL)s "http://www.uniprot.org/uniprot/?format=xml&query=taxonomy:10090+AND+reviewed:yes&compress=yes" | %(ZCAT)s | %(sedcmd)s > %(ODIR)s/10090_uniprot_sprot.xml
    %(CURL)s "http://www.uniprot.org/uniprot/?format=xml&query=taxonomy:10090+AND+reviewed:no&compress=yes"  | %(ZCAT)s | %(sedcmd)s > %(ODIR)s/10090_uniprot_trembl.xml

[interpro]
cmd:
    %(CURL)s ftp://ftp.ebi.ac.uk/pub/databases/interpro/interpro.xml.gz  | %(ZCAT)s > %(ODIR)s/interpro.xml

[protein2ipr]
# The download file (protein2ipr.dat.gz) is over 3.5 GB compressed! So....
# (1) We use curl's -z option to only download if there's an update. Also, the file
# is placed in the parent directory (otherwise it would get deleted every time).
# (2) We leave it compressed, and zcat it through our filter (filterProtein2Ipr.py)
# to extract the tiny fraction we need. That fraction consists of the lines for 
# the proteins we actually load from uniprot.
# 
cmd:
    %(CAT)s %(ODIRBASE)s/uniprot/latest/*.xml | %(GREP)s '<accession>' | %(SED)s 's/<accession>\(.*\)<\/accession>/\1/' > %(PDIR)s/ids.txt
    %(CURL)s --silent --verbose -m 5400 "ftp://ftp.ebi.ac.uk/pub/databases/interpro/protein2ipr.dat.gz" -R -o %(PDIR)s/protein2ipr.dat.gz -z %(PDIR)s/protein2ipr.dat.gz
    %(ZCAT)s < %(PDIR)s/protein2ipr.dat.gz | %(PYTHON)s %(BIN)s/libdump/filterProtein2Ipr.py %(PDIR)s/ids.txt > %(ODIR)s/protein2ipr.dat

#[reactome]
#cmd:
#    %(CURL)s -o %(ODIR)s/biopax.zip http://reactomerelease.oicr.on.ca/download/current/biopax.zip
#    %(UNZIP)s %(ODIR)s/biopax.zip -d %(ODIR)s


