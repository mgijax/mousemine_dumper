#!/bin/bash
#
# Update data
#
# Main script for building/updating the data files used by the viewer.
#

export DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
export ODIR="$1"
export LOGFILE="$2"
source "${DIR}/config.sh"

function download {
   strain=$1
   url=$2
   fname=$3
   logit "Downloading:" "${url}" "to" "${fname}"
   curl -R -z ${fname} -o ${fname} $url 2>>${LOGFILE}
   checkExit
   #
}

function prepFasta {
    strain=$1
    localname=$2
    fsrc=$3
    odir=$4
    logit "Strain ${strain}: uncompressing ${fsrc} into ${odir}/${localname}.chromosome.*.fa"
    gunzip -c "${fsrc}" | python ${BDIR}/prepFastaFile.py -i - -s "${strain}" -l "${localname}" -o "${odir}" 2>>${LOGFILE}
    checkExit
}

function prepGff {
    strain=$1
    fname=$2
    gname=$3
    smpname=$4
    logit "Converting ${fname} to ${gname}"
    gunzip -c "${fname}" | python ${BDIR}/prepGffFile.py -s "${strain}" -v ${VALIDIDFILE} -m ${MAPPINGFILE} > "${gname}" 2>>${LOGFILE}
    checkExit
    logit "Creating sample ${smpname} from ${gname}"
    python ${BDIR}/makeSamples.py < ${gname} > "${smpname}" 2>>${LOGFILE}
    checkExit
}

function summarize {
    logit "Summarizing output files..."
    logit $*
    logit "Distinct types and biotypes (col 3 and col 9)..."
    grep -v "#" $* | grep biotype | cut -f 3,9 | sed "s/        .*biotype=\([^;]*\).*/    \1/" | sort | uniq > ${WDIR}/types_biotypes.txt
    checkExit
}

function main {
    # setup
    mkdir -p ${ODIR}; checkExit
    mkdir -p ${WDIR}; checkExit
    mkdir -p ${DGDIR}; checkExit
    mkdir -p ${DFDIR}; checkExit
    mkdir -p ${GDIR}; checkExit
    mkdir -p ${SDIR}; checkExit
    mkdir -p ${FDIR}; checkExit
    #
    #rm -f ${LOGFILE}
    #touch ${LOGFILE}
    logit "=========================================="
    logit "Starting strain genomes GFF3 file preparation script."
    # generate file of valid MGI IDs
    logit "Generating valid MGI id..."
    python ${BDIR}/getValidMgiIds.py > ${VALIDIDFILE} 2>>${LOGFILE}; checkExit
    # generate secondary-to-primary mapping file for MGI ids
    logit "Generating MGI ID mapping file..."
    python ${BDIR}/getSecondaryIdMapping.py > ${MAPPINGFILE} 2>>${LOGFILE}; checkExit
    # loop through the strains config table
    logit "Reading strains from ${STRAINS}..."
    while read -u 10 p; do
	IFS='	' read -r -a array <<< "${p}"
	#
	strainid="${array[0]}"		# MGI:2160671
	strainname="${array[1]}"	# SPRET/EiJ
	localname="${array[2]}"		# mus_spretus_spreteij
	gffurl=`eval echo "${array[3]}"` # ftp://ftp.ensembl ... /Mus_spretus_spreteij.SPRET_EiJ_v1.92.gff3.gz
	faurl=`eval echo "${array[4]}"` # ftp://ftp.ensembl ... /Mus_spretus_spreteij.SPRET_EiJ_v1.dna_rm.toplevel.fa.gz
	#
	#echo "strain id = ${strainid}"
	#echo ${strainname}
	#echo ${localname}
	#echo ${gffurl}
	#echo ${faurl}
	#echo
	#
	gfname=`basename ${gffurl}`	# Mus_spretus_spreteij.SPRET_EiJ_v1.92.gff3.gz
	gfname="${DGDIR}/${gfname}"		# .../downloads/gff3/Mus_spretus_spreteij.SPRET_EiJ_v1.92.gff3.gz
	gfname2="${GDIR}/${localname}.gff3"	# .../latest/gff3/mus_spretus_spreteij.gff3
	gfname3="${SDIR}/${sfname}.sample.gff3"	# .../gff3.samples/mus_spretus_spreteij.sample.gff3
	#
        logit "Strain=${strainname}, GFF"
	download "${strainname}" "${gffurl}" "${gfname}"
	prepGff "${strainname}" "${gfname}" "${gfname2}" "${gfname3}"
	#
	fafname=`basename ${faurl}`	# Mus_spretus_spreteij.SPRET_EiJ_v1.dna_rm.toplevel.fa.gz
	fafname="${DFDIR}/${fafname}"	# .../downloads/fasta/Mus_spretus_spreteij.SPRET_EiJ_v1.dna_rm.toplevel.fa.gz
	fafname2="${FDIR}/${localname}.fa"
	#
        logit "Strain=${strainname}, FASTA"
	download "${strainname}" "${faurl}" "${fafname}"
	prepFasta "${strainname}" "${localname}" "${fafname}" "${FDIR}"

    done 10<${STRAINS}
    # summarize the results
    summarize ${GDIR}/*.gff3
    logit "Done. No errors detected."
}

###
main
###

# THE END
